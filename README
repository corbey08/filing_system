📝 Description
This project is a desktop-based frontend pension scheme document filing system designed to provide a robust and intuitive user interface for managing data. Built with Python and PyQt5, it offers a clean and responsive UI that can be easily connected to various backend databases. The primary goal of this application is to serve as a versatile client-side interface for data entry, retrieval, and organisation, abstracting the complexities of direct database interaction from the user.

Key features include:

Intuitive User Interface: A modern and responsive graphical user interface developed with PyQt5.

Database Agnostic Frontend: Designed to be easily integrated with a custom backend database (e.g., SQLite, PostgreSQL, MySQL) by extending its data handling logic.

Data Management Capabilities: Provides core functionalities for organizing and potentially manipulating records (e.g., adding new entries, viewing existing data, search/filter capabilities - adjust based on actual features).

Cross-Platform Executable: Packaged for easy distribution and use on Windows systems without requiring a Python environment.

✨ Features
File/Record Entry: User interface elements for inputting data fields.

Data Display: Ability to view existing records in a table format.

Search & Filter: Functionality to search for specific records or filter them by criteria.

Basic Navigation: Clear navigation within the application.

🚀 Getting Started
Prerequisites
To run this application from source, you will need:

Python 3.x

pip (Python package installer)

Installation
Clone the repository:

Bash

git clone https://github.com/corbey08/filing_system.git
cd filing_system
Create and activate a virtual environment (recommended):

Bash

python -m venv venv
# On Windows
.\venv\Scripts\activate
# On macOS/Linux
source venv/bin/activate
Install the required dependencies:

Bash

pip install -r requirements.txt

Running the Application
To run the frontend system:

Bash

python main.py

Executable Version (Windows)
A pre-built executable for Windows is available in the dist directory. You can download and run main.exe directly, without needing a Python environment.

⚙️ How to Connect to a Backend Database
This frontend is designed to be flexible. To connect it to your desired backend database:

Modify gui.py:

Locate the data handling functions within gui.py.

Implement your database connection logic using appropriate Python database drivers (e.g., sqlite3, psycopg2, mysql-connector-python).

Write functions to insert, retrieve, update, and delete data from your chosen database.

Example Integration Points:

When the "Save" button is clicked, call your database insertion function.

Upon application startup or when a specific view is loaded, fetch data from your database to populate the UI.


📁 Project Structure
.
├── assets/                     # Directory for application icons and other static assets
├── build/                      # Temporary build directory (generated by PyInstaller)
│   └── main/                   # PyInstaller's main build output
├── dist/                       # Distribution directory for packaged executables
│   └── main.exe                # Windows executable of the application
├── __pycache__/                # Python's cached bytecode
├── filing.ui                   # Qt Designer UI file (defines the layout and widgets)
├── gui.py                      # Python code handling the GUI logic and events
├── LICENSE.txt                 # License file 
├── main.py                     # Main application entry point
├── main.spec                   # PyInstaller spec file for building the executable
├── requirements.txt            # List of Python dependencies
└── resources_rc.py             # Python module generated from Qt resource file (for icons/images)

⚠️ License
See the LICENSE.txt file for details.

📞 Contact
If you have any questions or feedback, feel free to open an issue on this repository.
